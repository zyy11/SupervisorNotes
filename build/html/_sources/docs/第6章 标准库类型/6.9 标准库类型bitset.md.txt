# 6.9 标准库类型：bitset

## 简介

标准库定义了`bitset`类让位运算的使用更加容易，并且能够处理超过最长整形类型大小的位集合。`bitset`类定义在头文件`bitset`中。

## 定义和初始化bitset

`bitset`类似于`array`类，具有固定的大小。当我们定义一个`bitset`时需要声明它包含多少个二进制位：

```c++
bitset<32> bitvec(1U);  // 32位, 低位为1其他位为0
```

初始化的方法：

| 操作                                 | 含义                                                         |
| ------------------------------------ | ------------------------------------------------------------ |
| `bitset<n> b`                        | 每一位均为0                                                  |
| `bitset<n> b(u)`                     | `b`是`unsigned long long`值`u`的低`n`位的拷贝，如果`n`大于`unsigned long long`的大小，那么超过的高位被置为0 |
| `bitset<n> b(s, pos, m, zero, one)`  | `b`是`string s`从位置`pos`开始`m`个字符的拷贝。`s`只能包含字符`zero`和`one`，如果包含其他字符会抛出`invalid_argument`的错误。`zero`默认为`0`而`one`默认为`1`。 |
| `bitset<n> b(cp, pos, m, zero, one)` | 和上面类似，只不过从`cp`指向的字符数组中拷贝字符             |

## bitset操作

* `b.any()`：`b`中是否存在置位的二进制位
* `b.all()`：`b`中所有位都置位了吗
* `b.none()`：`b`中不存在置位的二进制位吗
* `b.count()`：`b`中置位的位数
* `b.size()`：返回`b`的位数
* `b.test(pos)`：返回`pos`位置是否置位
* `b.set(pos, v)`：将位置`pos`处的位设置为`bool`值`v`
* `b.set()`：将`b`中所有位置位
* `b.reset(pos)`：将`pos`复位
* `b.reset()`：将所有位复位
* `b.flip(pos)`：将位置`pos`处的位改变
* `b.flip()`：改变每一位的状态
* `b[pos]`：访问`pos`位
* `b.to_ulong()`：返回一个`unsigned long`
* `b.to_ullong()`：返回一个`unsigned long long`
* `b.to_string(zero, ont)`：返回一个`string`

* `os << b`：将`b`中二进制位打印为字符`1`或者`0`
* `is >> b`：从`is`读取字符存入`b`，当下一个字符不是`1`或`0`，或者已经读入`b.size()`个位时停止